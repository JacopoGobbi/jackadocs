package net.jackadull.jackadocs.docs.readme

import net.jackadull.jackadocs.structure.{Chapter, RootChapter}

import scala.xml.NodeSeq

object Ch3_UsageExample extends Chapter {
  def title = "Usage Example"

  def contents(root:RootChapter):NodeSeq =
<p>
  As described, there is no special magic in using Jackadocs.
  Because there are many ways to use the tools presented by the Jackadocs library, the best introduction is an example.
  The reader can then make up his or her own way of preference of using Jackadocs.
</p>
<p>
  The sub-module and code that generates this text serves as the example.
  It can be found in the <a href="https://github.com/jackadull/jackadocs/tree/release/latest/docs"><tt>docs</tt></a> subfolder of the <tt>jackadocs</tt> project.
  In it, you will find Scala souce code under <tt>src/main/scala</tt> that contains all the data for generating this documentation.
</p>

  override def subChapters:Seq[Chapter] = Seq(
    Chapter("How to Re-Generate this Documentation",
<p>
  The documentation of Jackadocs (i.e., the <tt>README.md</tt> in the <tt>jackadocs/docs</tt> root folder) is (re-)generated by calling <tt>sbt jackadocsGenerate</tt>.
  This is effectively defined as:
</p>
<pre><code class="language-bash">
jackadocsGenerate := (runMain in Compile).toTask(s" ${{projectInfo basePackage}}.docs.Main .").value
</code></pre>
<p>
  SBT will then compile the project, and run the main class of <tt>docs</tt>.
  The main class (i.e., the class that contains the <tt>main</tt> method) is <tt>net.jackadull.jackadocs.docs.Main</tt>.
  The command-line argument for the execution is fixed as <tt>.</tt>.
  This is the path to the project root folder.
</p>,
      subChapters = Seq(
Chapter("Automation in the Main Project",
<p>
  The process of re-generating the documentation has been automated by aliasing <tt>sbt build</tt> to <tt>;compile ;jackadocsGenerate</tt>.
</p>
<p>
  The SBT file also contains another option:
  When calling <tt>sbt jackadocsVerify</tt>, then the option <tt>-V</tt> is added to the command-line parameters of the <tt>docs</tt> main.
  This does not re-generate the documentaton, but just verifies that the current version has all the latest information.
  If there is any difference, an exception is thrown, effectively cancelling the build.
  More on that further below.
</p>
)
      )
    ),
    Chapter("The Main Class",
<p>
  The source code of the main class can be found <a href="https://github.com/jackadull/jackadocs/blob/release/latest/docs/src/main/scala/net/jackadull/jackadocs/docs/Main.scala">here</a>.
  As can be seen, it inherits from <tt>JackadocsMain</tt> and <tt>App</tt>.
  <tt>JackadocsMain</tt> is really not a requirement; it can be extended optionally for some utility value.
  Its source code is quite short, so you may want to look it up.
</p>
<p>
  Here is what it does:
</p>
<ul>
  <li>
    <p>
      It creates a <tt>Jackadocs</tt> instance, stored in the variable <tt>jackadocs</tt>.
      This class contains the main functions used for generating the documentation, and some other things.
    </p>
    <p>
      The <tt>Jackadocs</tt> factory method receives the command-line arguments.
      The most important (and required) argument is the path to the project root.
    </p>
    <p>
      The other optional argument is <tt>-V</tt>.
      When specified, files will not be overwritten, but their contents will only be verified.
      When <tt>-V</tt> is specified and one of the documentation files is not exactly as it <i>would</i> be written, the program fails.
    </p>
  </li>
</ul>
<p>
  The <tt>Main</tt> object of Jackadocs' <tt>docs</tt> also does the following:
</p>
<ul>
  <li>
    <p>Generate the <tt>README.md</tt> file:</p>
<pre><code class="language-scala">
jackadocs generateAt s"$projectDir/docs/README.md" markdownFor ReadmeRoot
</code></pre>
    <p>
      Tells Jackadocs to generate the Markdown for <tt>ReadmeRoot</tt> and write it into <tt>README.md</tt>, relative to the project base directory that was passed in as a command-line argument.
    </p>
    <p>
      <tt>ReadmeRoot</tt> can be found <a href="https://github.com/jackadull/jackadocs/blob/release/latest/docs/src/main/scala/net/jackadull/jackadocs/docs/ReadmeRoot.scala">here</a>.
      The contents of this object follow the chapter structure, which gets described below.
    </p>
  </li>
  <li>
    <p>Define the minimum set of methods required by <tt>JackadocsMain</tt>:</p>
    <ul>
      <li>
<pre><code class="language-scala">
def organizationName = "jackadull"
</code></pre>
        <p>This is the name of the organization, as it usually appears in URLs of services like GitHub, Travis-CI etc.</p>
      </li>
      <li>
<pre><code class="language-scala">
def projectDir = "."
</code></pre>
        <p>The path to the main project, relative to the command-line argument.</p>
      </li>
      <li>
<pre><code class="language-scala">
def projectInfo = new JackadocsInfo {{ ... }}
</code></pre>
        <p>
          Makes the Maven artifact data (group/artifact ID and version) accessible to <tt>JackadocsMain</tt>.
          This is used for a couple of features.
        </p>
        <p>
          In this case, the data is copied over dynamically from an auto-generated build info file.
          This is achieved using <a href="https://github.com/sbt/sbt-buildinfo">this plugin</a>.
        </p>
      </li>
      <li>
<pre><code class="language-scala">
def sourceRepoProvider = "github"
</code></pre>
        <p>Used for GitHub readme badges that require the source repo provider as part of the URL.</p>
      </li>
    </ul>
  </li>
</ul>
<p>
  When you take a look at
    <a href="https://github.com/jackadull/jackadocs/blob/release/latest/src/main/scala/net/jackadull/jackadocs/execution/JackadocsMain.scala"><tt>JackadocsMain</tt></a>
    and its super type
    <a href="https://github.com/jackadull/jackadocs/blob/release/latest/src/main/scala/net/jackadull/jackadocs/structure/DocsMetaData.scala"><tt>DocsMetaData</tt></a>,
    you will find many more properties with reasonable default implementations that can be overridden when necessary.
</p>
    )
  )
}
